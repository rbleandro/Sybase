Steps to Setup IQ Replication for a database:

--First section only applies to IQ and SRS tuning params
in SRS on IQ connection from SRS
dsi_cmd_batch_size – number of bytes sent in a batch.  Default of 8192 is typically too small.  A good start is 65536.
dsi_compile_max_cmds – Be sure this is large enough for large transactions, otherwise, RTL may not be used.  Use 200,000 to start.
dsi_cdb_max_size -- set this high as well, so not hit IQ with constant transactions from SRS. -- Start with 10240
dsi_compile_enable -- also should be enabled

-- See the command below...for all connection settings

In IQ:
Minimize_storage = ‘on’ – be sure to turn this parameter on either globally or at the beginning of your DDL scripts.  This will enable optimized FP[1-3] index creation.  (see FP index rollover discussion below)
Append_Load = ‘on’ – Its recommended to turn this for RTL performance.  This option prevents IQ from filling in the blank spaces in indexes. Instead, IQ will append to the end of indexes.  Some caution and monitoring (sp_iqindexframentation for non-FP) is required since table fragmentation can occur.
set option public.Append_Load = 'On'

1- Create user for that database in IQ: eg cmf_data_lm (For loomis dbs)

CREATE USER cmf_data_lm_rep1 IDENTIFIED BY sybase;
GRANT ROLE DBA TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT ROLE readers TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT ROLE PUBLIC TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT ROLE lmo TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT DELETE ANY TABLE TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT INSERT ANY TABLE TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT SELECT ANY TABLE TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT UPDATE ANY TABLE TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT TRUNCATE ANY TABLE TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT CREATE ANY OBJECT TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT EXECUTE ANY PROCEDURE TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
GRANT LOAD ANY TABLE TO cmf_data_lm_rep1 WITH NO ADMIN OPTION;
COMMENT ON USER cmf_data_lm_rep1 IS 'User is used for IQ replication from cmf_data_lm';

1a- Create user for that database: eg rev_hist_lm (For canpar dbs)
CREATE USER rev_hist_lm_rep1 IDENTIFIED BY sybase;
GRANT ROLE DBA TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT ROLE readers TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT ROLE PUBLIC TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT ROLE dbo TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT DELETE ANY TABLE TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT INSERT ANY TABLE TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT SELECT ANY TABLE TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT UPDATE ANY TABLE TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT CREATE ANY OBJECT TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT EXECUTE ANY PROCEDURE TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT TRUNCATE ANY TABLE TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
GRANT LOAD ANY TABLE TO rev_hist_lm_rep1 WITH NO ADMIN OPTION;
COMMENT ON USER rev_hist_lm_rep1 IS 'User is used for IQ replication from rev_hist_lm';

2- Create connection for the IQ in SRS for that db

create connection to CPIQ.rev_hist_lm_iq_conn1 
using profile rs_ase_to_iq;standard
set username to rev_hist_lm_rep1
set password to sybase
go

-- Alter the connection to enable HVAR
alter connection to CPIQ.rev_hist_lm_iq_conn1 set dsi_compile_enable to 'on'
alter connection to CPIQ.rev_hist_lm_iq_conn1 set dsi_cmd_batch_size to '65536' 
alter connection to CPIQ.rev_hist_lm_iq_conn1 set dsi_compile_max_cmds to '200000'
alter connection to CPIQ.rev_hist_lm_iq_conn1 set dsi_cdb_max_size to '10240'
suspend connection to CPIQ.rev_hist_lm_iq_conn1
resume connection to CPIQ.rev_hist_lm_iq_conn1

*****************--Example of setting a table for replication to IQ--****************************************

-- Tips : Points to remember
-- decimal datatype with precision and scale, eg: decimail(6,1) should be replaced with decimal in repdef
-- All bits should be converted to int in IQ, or replication will stack trace

drop replication definition CPDB2_iq_lm_revhst_rep

create replication definition CPDB2_iq_lm_revhst_rep
with primary at CPDB1.rev_hist_lm
with primary table named dbo.'revhsth'
with replicate table named DBA.'cp_revhsth'
(
    columns without NULL specification...
)	
primary key ( PK columns here )


--Very important, if a table has a keyword such as cube, we need to add quoted in the column specification.
--and use the following command as well for that table
-- alter connection  to CPIQ.lm_revhstf1_iq_conn1 for replicate table named dbo.revhstf1 set dsi_quoted_identifier to 'on'
-- alter connection  to CPIQ.lm_revhstf1_iq_conn1 set dsi_quoted_identifier to 'on'

sp_setreptable 'dbo.revhsth','true', owner_on --execute this on publisher ASE

-- It would also be best, to guarantee accurate data, that you empty the table before you
-- create the sub. That way while the data load, all subsequent replicated trans will be queued up
-- and once the initial load completes, data will get in sync. But, you will need to set i2di and u2di
-- Because the subscription does not know that there is data already there in replicate, it will also
-- complain about row count mismatch, so we will need to ignore that for the duration of initial load and 
-- initial catch up of replicated trans in the queue
-- See below

-- You must add dbo to table name, since you are replicating with owner_on
-- Setting i2di for all tables of a connection, can be an issue.
-- We will need to enable this for each table, and we should not use i2di for tables, which do not have any primary or unique keys!!!
alter connection to CPIQ.rev_hist_lm_iq_conn1 for replicate table named dbo.revhsth set dsi_command_convert to 'i2di,u2di';
alter connection to CPIQ.rev_hist_lm_iq_conn1 set dsi_row_count_validation to 'off'; -- This can stay on for the whole connection;
suspend connection to CPIQ.rev_hist_lm_iq_conn1;
resume connection to CPIQ.rev_hist_lm_iq_conn1 execute transaction;

-- create sub and at the same time...
create subscription CPDB2_iq_lm_revhst_sub for CPDB2_iq_lm_revhst_rep with replicate at CPIQ.rev_hist_lm_iq_conn1 without materialization;

-- Wait to make sure that sub is created on BOTH Primary and Replicate!! And then...
-- suspend connection for the duration of initial load
suspend connection to CPIQ.rev_hist_lm_iq_conn1;

-- Now start the initial load in IQ through insert location command
-- Note tables with identity column need to have identity insert on in IQ
--  set temporary option identity_insert = 'dbo.revhsth'
truncate table revhsth
go
insert into revhsth IGNORE CONSTRAINT UNIQUE 0 location 'CPDB1.rev_hist_lm' packetsize 7168
{ 
	select 
	...
	from revhsth 
}
commit
  
--  set temporary option identity_insert = ''

-- after the initial load completes, issue a rs_ticket, to make sure that you have synced all queued trans 
-- Check if the ticket shows up in IQ and then
-- disable i2di and u2di, since that slows replication down, see below
-- resume connection to start initial sync of replicated tran

resume connection to CPIQ.rev_hist_lm_iq_conn1;
admin who,sqm,CPIQ,rev_hist_lm_iq_conn1;

--once the replicated tran are loaded, run a rs_ticket to make sure all data has been replicated.
-- Or you can check admin who,sqm,CPIQ,rev_hist_lm_iq_conn1  If first and last seg block are same 
-- then it is in sync and you can disable the following

alter connection to CPIQ.rev_hist_lm_iq_conn1 for replicate table named dbo.revhsth set dsi_command_convert to 'none';
alter connection to CPIQ.rev_hist_lm_iq_conn1 set dsi_row_count_validation to 'on';
suspend connection to CPIQ.rev_hist_lm_iq_conn1;
resume connection to CPIQ.rev_hist_lm_iq_conn1;

--save all in a file in hqvsybrep3:/home/sybase/IQ_replication

--************ In case you need to drop any repdef or sub, here is example of both *******--
-- Disable table replication
sp_setreptable revhsth,'false'

--Drop sub
drop subscription CPDB2_iq_lm_revhst_sub for CPDB2_iq_lm_revhst_rep with replicate at CPIQ.rev_hist_lm_iq_conn1 without purge

--Drop repdef
drop replication definition CPDB2_iq_lm_revhst_rep
